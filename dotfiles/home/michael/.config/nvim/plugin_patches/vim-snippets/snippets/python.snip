snippet #!
    #!/usr/bin/env python3.6
    # -*- coding: UTF-8 -*-
# scripts / main.py
snippet addp
    parser = ${VISUAL:argparse.}ArgumentParser()
snippet addsp
    ${0:sub_parser} = parser.add_subparsers().add_parser("${1:name}")
snippet addarg
    parser.add_argument("${0:short_arg}", "${1:long_arg}", default=${2:None}, help="${3:Help text}")
snippet addnarg
    parser.add_argument("${0:arg}", nargs="${1:*}", default"${2:None}, help="${3:Help text}")
snippet addaarg
    parser.add_argument("${0:arg}", "${1:long_arg}", action="${2:store_true}", default=${3:False}, help="${4:Help text}")
snippet pargs
    "${VISUAL:return }"parser.parse_args()

# control flow
snippet wh
    while ${1}:
        ${0:${VISUAL}}
snippet dowh
    while True:
        ${1}
        if ${0}:
            break
snippet with
    with ${1} as ${2:var}:
        ${0:${VISUAL}}
snippet for
    for ${1:var} in ${2}:
        ${0}
snippet if
    if ${1}:
        ${0:${VISUAL}}
snippet el
    else:
        ${0:${VISUAL}}
snippet ei
    elif ${1}:
        ${0:${VISUAL}}
snippet ret
    return ${0}
    
# Exception handling
snippet try
    try:
        ${1:${VISUAL}}
    except ${2:Exception} as ${3:e}:
        ${4:raise $3}
    else:
        ${5}
    finally:
        ${0}
        
# Lambda
snippet ld
    lambda ${2} : ${0}
    
# __magic__
snippet _
    __${1:init}__
# Debugging & testing
snippet pdb
    __import__('pdb').set_trace()
snippet "
    """${0:doc}"""
snippet test
    def test_${1}(${2:`indent('.') ? 'self' : ''`}):
        ${0}
snippet testcase
    class ${1:ExampleCase}(unittest.TestCase):
        def test_${2:description}(self):
            ${0}
            
# logging
snippet glog
    self._log = logging.getLogger(__name__)
    self._log.setLevel(${1:logging.INFO})
    self._log.propagate = False
    if not self._log.hasHandlers():
        handler = logging.StreamHandler()
        logFormat = ('[%(asctime)s %(levelname)s] '
                     '%(name)s:%(lineno)s %(message)s')
        handler.setFormatter(logging.Formatter(logFormat))
        self._log.addHandler(handler)
    ${0}

snippet log
    self._logger.log(f'${0}')
snippet logc
alias crit logcrit logcritical
    self._logger.critical(f'${0}')
snippet loge
alias logerr logerror
    self._logger.error(f'${0}')
snippet logd
alias debug logdbg logdebug
    self._logger.debug(f'${0}')
snippet logw
alias warn logwarn logwarning
    self._logger.warning(f'${0}')
snippet logi
alias info loginfo
    self._logger.info(f'${0}')
    
# comprehensions
# Removed options word - doesn't work?
snippet lcp
    [${1} for ${2} in ${3:${VISUAL}}]${0}
snippet dcp
alias dictcomp
    {${1}: ${2} for ${3} in ${4:${VISUAL}}}${0}
snippet scp
alias setcomp
    {${1} for ${2} in ${3:${VISUAL}}}${0}
    
# Print
snippet pr
alias print
    print(${0})
snippet prs
alias printstr
    print('${0}')
snippet pfs
alias printfstr
    print(f'${0}')
snippet date
options word
    `strftime("%d %b %Y")`

    
# Function
snippet def
alias func function
options head
    def ${1:#:name}(${2:`indent('.') ? 'self' : 'object'`}):
        """${3:#:function documentation}"""
        ${0:pass}

# Misc. class snippets
snippet .
    self.
snippet s
    self

# Class methods
#regexp '^\s+'
snippet defm
alias meth method
    def ${1}(self, ${2}):
        """ ${3}
        """
        ${0}
# Context manager methods
snippet context
    def __enter__(self):
        ${1:pass}
    def __exit__(self, exc_type, exc_value, traceback):
        ${2:pass}

# Attribute access methods
snippet getattr
    def __getattr__(self, name):
        ${1:pass}
snippet setattr
    def __setattr__(self, name, value):
        ${2:pass}
snippet delattr
    def __delattr__(self, name):
        ${3:pass}
snippet repr
    def __repr__(self):
        ${1:pass}
snippet str
    def __str__(self):
        ${2:pass}
snippet unicode
    def __unicode__(self):
        ${3:pass} 
        
# Class
snippet cl
alias class
    class ${1}(${2:object}):
        """ ${3:TODO} """
        def __init__(self, ${4:#:arg}):
            """ Initialises a new ${1} instance.
            """
            super(${1}, self).__init__()

# Property
snippet prop
    @property
    def ${1}():
        """Getter for ${1}"""
            ${0}
        return self._${1}
    @${1}.setter
    def ${1}(self, value):
        """Getter for ${1}"""
        self._${1} = value
    def ${1}(self):
        """Deleter for ${1}"""
    del self._${1}
    
# Patterns
snippet singleton
    class ${1}(${2:object}):
        """${3:TODO}"""
        __instance = None
        def __new__(cls, ${4:#:arg=None}):
            if self.__instance is None:
                self.__instance = new ${1}(${4})
            ${0}
            return self.__instance
